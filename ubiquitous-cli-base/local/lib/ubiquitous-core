#!/bin/bash

#
# Ubiquitous Moodle
#
# @author Luke Carrier <luke@carrier.im>
# @copyright 2018 The Ubiquitous Authors
#

. "$(cd "$(dirname "$0")" && pwd -P)/ubiquitous-platforms"

# Extended globbing and disabling literal expansion on 0 results required for
# symlink handling.
shopt -s extglob
shopt -s nullglob

UBIQUITOUS_INSTALL_CONFIG="${UBIQUITOUS_PREFIX}/bin/ubiquitous-install-config-%s"
UBIQUITOUS_PLATFORMS="${UBIQUITOUS_PREFIX}/etc/ubiquitous-platforms"
UBIQUITOUS_RELEASES_DIR="%s/releases"
UBIQUITOUS_CURRENT_LINK="%s/current"

ERROR_PARAMS=1
ERROR_STATE=2

SYMLINK_NOT_PRESENT=1
SYMLINK_TARGET_NOT_PRESENT=2
SYMLINK_TARGET_INVALID_PARENT=2

abort() {
    local status="$1"
    local message="$2"

    echo "$message" >&2
    exit "$status"
}

require_root() {
    if [ "$USER" != "root" ]; then
        abort $ERROR_PARAMS "you must be root"
    fi
}

resolve_symlink() {
    local symlink="$1"
    local expect_parent="$2"

    local target
    if [ -L "$symlink" ]; then
        target="$(readlink -fn "$symlink")"
        if [ -z "$expect_parent" ] || [[ "$target" == "$expect_parent"/* ]]; then
            if [ -e "$target" ]; then
                echo "$target"
                exit 0
            else
                echo "$target"
                exit $SYMLINK_TARGET_NOT_PRESENT
            fi
        else
            echo "$target"
            exit $SYMLINK_TARGET_INVALID_PARENT
        fi
    else
        exit $SYMLINK_NOT_PRESENT
    fi
}

print_symlink() {
    local target=$1
    local state=$2

    case $state in
        0)
            echo "$target"
            ;;
        $SYMLINK_NOT_PRESENT)
            echo "<invalid (not a symlink)>"
            ;;
        $SYMLINK_TARGET_NOT_PRESENT)
            echo "<invalid (target '${target}' doesn't exist)>"
            ;;
        $SYMLINK_TARGET_INVALID_PARENT)
            echo "<invalid (target '${target}' outside of expected parent)>"
            ;;
        *)
            echo "<invalid (reason unknown)>"
            ;;
    esac
}

require_platform() {
    local domain="$1"
    local raw

    if [ -z "$domain" ]; then
        abort $ERROR_PARAMS "no domain supplied"
    fi

    set +e
    raw="$(grep -E "^${domain}:" "$UBIQUITOUS_PLATFORMS")"
    if [ $? -ne 0 ]; then
        abort $ERROR_PARAMS "supplied domain '${domain}' doesn't exist"
    fi
    set -e

    # Configuration items in the platforms file, written by Salt
    platform_domain="$(echo "$raw" | cut -d: -f1)"
    platform_basename="$(echo "$raw" | cut -d: -f2)"
    platform_role="$(echo "$raw" | cut -d: -f3)"
    platform_user="$(echo "$raw" | cut -d: -f4)"
    platform_home="$(echo "$raw" | cut -d: -f5)"

    # Ensure that platform role is valid
    platform_install_config_script="$(printf "$UBIQUITOUS_INSTALL_CONFIG" "$platform_role")"

    # Paths derived from the home directory and basename
    platform_releases_dir="$(printf "$UBIQUITOUS_RELEASES_DIR" "$platform_home")"
    platform_current_link="$(printf "$UBIQUITOUS_CURRENT_LINK" "$platform_home")"

    if [ ! -d "$platform_releases_dir" ]; then
        abort $ERROR_STATE "release directory '${platform_releases_dir}' doesn't exist"
    fi

    # Current environment state
    set +e
    platform_current_release_target="$(resolve_symlink "$platform_current_link" "$platform_releases_dir")"
    platform_current_release_state="$?"
    set -e
}
